[build-system]
requires = ["setuptools>=48", "setuptools_scm[toml]>=6.3.1"]
build-backend = "setuptools.build_meta"

[project]
name = "trellis"
description = "Prime factorization endpoints"
readme = "README.md"
license = {"file" = "LICENSE"}
authors = [{name = "Matt Seddon", email = "mattseddon@hotmail.com"}]
requires-python = ">=3.12"
dynamic = ["version"]
dependencies = [
  "flask==3.1.0",
  "sympy==1.13.3"
]

[project.optional-dependencies]
tests = [
  "pytest==8.3.3"
]
dev = [
  "mypy==1.13.0",
  "ruff==0.7.4"
]

[tool.pytest.ini_options]
addopts = "-rfEs"

[tool.mypy]
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = false
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
ignore_missing_imports = true
disable_error_code = "annotation-unchecked"

[tool.ruff]
show-fixes = true

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
ignore = [
  "S101",  # assert
  "PLR2004",  # magic-value-comparison
  "PLW2901",  # redefined-loop-name
  "ISC001",  # single-line-implicit-string-concatenation, incompatible with ruff format
  "RET502",  # implicit-return-value
  "RET503",  # implicit-return
  "SIM105",  # suppressible-exception
  "SIM108",  # if-else-block-instead-of-if-exp
  "SIM117",  # multiple-with-statements
  "PERF203",  # perflint - try-except-in-loop, irrelevant for Python>=3.11
  "PERF401",
  "D103",
  "D100",  # undocumented-public-module
  "D205"  # one-blank-line-after-class
]
select = [
  "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "C420",  # unnecessary-dict-comprehension-for-iterable
  "C90",  # mccabe
  "W",  # pycodestyle - Warning
  "E",  # pycodestyle - Error
  "F",  # pyflakes
  "I",  # isort
  "T10",  # flake8-debugger
  "S",  # flake8-bandit
  "PL",  # pylint
  "TCH",  # flake8-type-checking
  "UP",  # pyupgrade
  "N",  # pep8-naming
  "YTT",  # flake8-2020
  "ASYNC",  # flake8-async
  "EXE",  # flake8-executable
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "PIE",  # flake8-pie
  "LOG",  # flake8-logging
  "G",  # flake8-logging-format
  "PYI",  # flake8-pyi
  "Q",  # flake8-quotes
  "SLOT",  # flake8-slots
  "PGH",  # pygrep-hooks
  "FLY",  # flynt
  "PERF",  # perflint
  "TID",  # flake8-tidy-imports
  "RSE",  # flake8-raise
  "INP",  # flake8-no-pep420
  "RUF",  # ruff rules
  "BLE",  # flake8-blind-except
  "SIM",  # flake8-simplify
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "DTZ",  # flake8-datetimez
  "FURB",  # refurb
  "NPY",  # numpy
  "TRY004",  # type-check-without-type-error
  "TRY201",  # verbose-raise
  "TRY203",  # useless-try-except
  "TRY401",  # verbose-log-message
  "RUF022",  # unsorted-dunder-all
  "RUF023",  # unsorted-dunder-slots
  "RUF027",  # missing-f-string-syntax
  "RUF030",  # assert-with-print-message
  "RUF101",  # redirected-noqa
  "D"  # pydocstyle
]

[project.scripts]
trellis = "trellis.app:main"


[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
known-first-party = ["datachain"]

[tool.ruff.lint.pylint]
max-args = 16
max-branches = 16
max-public-methods = 32
max-statements = 64

[tool.ruff.lint.mccabe]
max-complexity = 15